import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ErrorEvent, Message
from aiogram.enums.chat_type import ChatType
from aiogram import BaseMiddleware
from aiogram.filters import Command
import os
from dotenv import load_dotenv
from json_storage import JsonStorage
import traceback
from typing import Callable, Dict, Awaitable, Any

load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s ‚Äî %(levelname)s: %(message)s',
    handlers=[
        logging.FileHandler("debug.log"),
        logging.StreamHandler()
    ]
)

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω
API_TOKEN = os.getenv("TOKEN")
GROUP_ID = os.getenv("GROUP_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")
        ],
        [
            KeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞")
        ]],
    resize_keyboard=True
)

canteen_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ üõèÔ∏è"),
            KeyboardButton(text="–°—Ç–∏–ø–µ–Ω–¥–∏—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å üí∏")
        ],
        [
            KeyboardButton(text="–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ üèóÔ∏è"),
            KeyboardButton(text="International student üåç")
        ],
        [
            KeyboardButton(text="–°—Ç—É–¥–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üéâ"),
            KeyboardButton(text="–û–±—É—á–µ–Ω–∏–µ üìö")
        ],
        [
            KeyboardButton(text="–†–∞–ø–æ—Ä—Ç—ã –∏ –∞–∫—Ç—ã üìÑ"),
            KeyboardButton(text="–î—Ä—É–≥–æ–µ ‚ùì")
        ],
        [
            KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üîô")
        ]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –º–µ–¥–∏–∞
media_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞ üìµ")
        ],
        [
            KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üîô")
        ]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
end_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚úÖ"),
            KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üîô")
        ]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
back_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üîô")
        ]
    ],
    resize_keyboard=True
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = JsonStorage()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–æ–≤
class ChatFilterMiddleware(BaseMiddleware):
    def __init__(self, bot: Bot):
        self.bot = bot

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        chat = event.chat

        if chat.type == ChatType.PRIVATE:
            return await handler(event, data)

        if chat.type in {ChatType.GROUP, ChatType.SUPERGROUP}:
            if chat.id == GROUP_ID:
                return 
            else:
                try:
                    await self.bot.leave_chat(chat.id)
                    print(f"Left unauthorized group: {chat.title} ({chat.id})")
                except Exception as e:
                    print(f"Failed to leave chat {chat.id}: {e}")
                return 

        return


dp.message.middleware(ChatFilterMiddleware(bot=bot))


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
@dp.message(lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üîô')
async def goBack(message: types.Message):
    await send_welcome(message)


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_data.delete(user_id)
    user_data.set(user_id, {"stage": "main_menu"})  # –ù–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
    await message.answer(
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–æ–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –≤ —Ç—Ä—É–¥–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã "
        "–∏–ª–∏ –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º, –∫–∞—Å–∞—é—â–∏–º—Å—è –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.\n\n"
        "üí° –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É, –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—â–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
        "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, –Ω–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –Ω–µ–π –ª–∏–±–æ –¥–∞–¥–∏–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å "
        "–∏ –ø–æ–º–æ–∂–µ–º —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π.\n\n"
        "–ü–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ [–ì–µ—Ä–º–∞–Ω—É](https://t.me/herman_east) ‚Äî –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é "
        "–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
        reply_markup=main_menu_keyboard,
        parse_mode='Markdown'
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@dp.message(lambda message: message.text in [
    "–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ",
    "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞"
])
async def handle_action_selection(message: types.Message):
    user_id = message.from_user.id
    cur_user_data = user_data.get(user_id)
    cur_user_data["action"] = message.text
    cur_user_data["stage"] = "choose_canteen"
    user_data.set(user_id, cur_user_data)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=canteen_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–æ–≤–æ–π
@dp.message(lambda message: user_data.get(
        message.from_user.id, {}).get("stage") == "choose_canteen"
)
async def handle_canteen_selection(message: types.Message):
    user_id = message.from_user.id
    cur_user_data = user_data.get(user_id)
    cur_user_data["canteen"] = message.text
    cur_user_data["stage"] = "text_input"
    user_data.set(user_id, cur_user_data)
    if user_data.get(user_id)["action"] == "–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ":
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è\n\n"
            "(–º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ)",
            reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
            "(–º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ)",
            reply_markup=types.ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ –∂–∞–ª–æ–±—ã
@dp.message(lambda message: user_data.get(
        message.from_user.id, {}).get("stage") == "text_input"
)
async def handle_text_input(message: types.Message):
    if message.photo or message.video or message.document or message.audio or message.animation:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π. \n"
            "–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ."
        )
        return

    user_id = message.from_user.id
    cur_user_data = user_data.get(user_id)
    cur_user_data["text"] = message.text
    cur_user_data["media_files"] = []
    cur_user_data["sending_files"] = False
    cur_user_data["stage"] = "media"
    user_data.set(user_id, cur_user_data)
    await message.answer(
        "–ö —Å–æ–æ–±—â–µ–Ω–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\n\n"
        "–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ - "
        "–Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞ üìµ¬ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –º–µ–¥–∏–∞, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚úÖ¬ª, "
        "—á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É",
        reply_markup=media_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞
@dp.message(lambda message: user_data.get(
        message.from_user.id, {}).get("stage") == "media"
)
async def handle_media(message: types.Message):
    user_id = message.from_user.id
    cur_user_data = user_data.get(user_id)
    cur_user_data["sending_files"] = True
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞"
    if message.text in ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞ üìµ", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚úÖ"):
        await finalize_survey(message)
        return

    if message.photo or message.video:
        file_id = (message.photo[-1].file_id if message.photo
                   else message.video.file_id)
        media_type = 'photo' if message.photo else 'video'
        print(file_id)
        if len(cur_user_data["media_files"]) < 10:
            cur_user_data["media_files"].append({
                'type': media_type,
                'file_id': file_id
            })

    if message.media_group_id:
        await asyncio.sleep(1.5)

    if len(cur_user_data["media_files"]) >= 10 and cur_user_data["sending_files"] == True:
        cur_user_data["sending_files"] = False
        await message.answer(
            "–î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚úÖ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=end_keyboard
        )
    elif cur_user_data["sending_files"] == True:
        cur_user_data["sending_files"] = False
        await message.answer(
            f'–§–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(cur_user_data["media_files"])}/10\n'
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∏—Ö –Ω–∞–ª–∏—á–∏–∏.",
            reply_markup=end_keyboard
        )
    user_data.set(user_id, cur_user_data)


@dp.message()
async def fallback_handler(message):
    await message.answer(
        "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ /start –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"
    )


@dp.error()
async def global_error_handler(event: ErrorEvent):
    error_text = (
            "‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É –±–æ—Ç–∞:*\n"
            f"`{type(event).__name__}: {event.exception}`\n\n"
            "*Traceback:*\n"
            f"```{traceback.format_exc()[-1500:]}```"
        )
    await bot.send_message(GROUP_ID, error_text, parse_mode="Markdown")
    return True


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async def finalize_survey(message: types.Message):
    user_id = message.from_user.id
    data = user_data.get(user_id)
    result_text = (
        f"–û—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}\n\n"
        f"–î–µ–π—Å—Ç–≤–∏–µ: {data['action']}\n"
        f"–¢–µ–º–∞: {data['canteen']}\n"
        f"–¢–µ–∫—Å—Ç: {data['text']}\n"
    )

    media_group = []

    for index, file in enumerate(data["media_files"]):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
        if file["type"] == "photo":
            media_group.append(types.InputMediaPhoto(media=file["file_id"], caption=result_text if index == 0 else None))
        elif file["type"] == "video":
            media_group.append(types.InputMediaVideo(media=file["file_id"], caption=result_text if index == 0 else None))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –≥—Ä—É–ø–ø—É
    if media_group:
        await bot.send_media_group(chat_id=GROUP_ID, media=media_group)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è‚ù§",
        reply_markup=back_keyboard
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.delete(user_id)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
